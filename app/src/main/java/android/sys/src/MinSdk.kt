package android.sys.src

import android.app.Application
import android.app.Dialog
import android.util.Log
import android.content.Context
import android.os.Environment
import android.os.Handler
import android.os.Looper
import java.io.IOException
import java.io.BufferedReader
import com.android.sdk.exec.R
import android.content.pm.PackageManager
import android.content.pm.Signature
import android.widget.Toast

public class MinSdk : Application() {

companion object {
    init {
        System.loadLibrary("cpu")
    }
    
}
    private val expectedSignature = "30820b363082063ea00302010202043bce326a300d06092a864886f70d01010c05003054310c300a060355040613034c6962310c300a060355040813034c6962310c300a060355040713034c6962310c300a060355040a13034c6962310c300a060355040b13034c6962310c300a060355040313034c69623020170d3234303930313132323833325a180f33303233303130333132323833325a3054310c300a060355040613034c6962310c300a060355040813034c6962310c300a060355040713034c6962310c300a060355040a13034c6962310c300a060355040b13034c6962310c300a060355040313034c696230820502300d06092a864886f70d0101010500038204ef00308204ea028204e100d87f43d2be98e9c71efa49f4360f6b5d4542b35b42237c231a70848bfd97ad3828977565dbb8968ed12ef76e23b9d075cbb699a247ac04b079932719ab7952b1a5229988c8407ec48fbae8c2302de5608092652bd9b3ae5127e6b6b8d249536195c556fadceb1457fbb73613a1366a7a5704aad6662ff0c121a8ef6c27a8481122d490fd2a4cc309cf27ffc300a897415407b8d1a4f992a6239294207b1cd15905afe05e7ece6d10b84aa6390bc9bef3444b02413932a316c5bfe89a3d5f6f8a784995c6d87f816c377a1ec3fa5e196644749d0d1320766de7c7f018d0589d799b362eab0d16dd2df045a48d5870d976f3062243fc7d816838f6006c6168f0c37e9209976f3e3efffd728315f186374817ddf19b8bd07febbdfd02cff144e484df53a1d2b50c98ff14b3c82f35897c6a608cc53f6bba0ccc4fe0f31a00d5a24b226e516318f924d2a913d3120e81b3a15c58725a560382f94f9b3f66ce2d32b994777196fe96c46e4506c7bdec699f053e70d81a28a8273db9f3af5468dd13a1916f86a34f8ffa2ce29e7b7ce08f82f62e16056c5fb0e94ca64a6814281a2b93105817be7ac3b734edf72bfe96177c93a87a5d58a6d76601cfccb4bd71d7f8da0e074e01f4079dd21fe5ee9ba2932bf0fe8d8ba4af428660dfc1a371eb70d94399e04b973f9dc8bf7b08f32364bd8b6255d0a633ba64cd22fff724fb652750d712816b43b02f33d46d668e5de280bd3e60d0819e71009cb653ed897b748f71821bda6eac3f1e25ec8bb8b6bad56bb6e8fe14419c03998094632b0c16279139347d052897687670a2e2a5c51aaa2b5cd4a8feddc102f80917a106aaa2e349d4503ad61011adba72b904f2cb11b7f530917e8ed047d771a2344642a6cdc622767ca7cce4598faa6295055a2a2b353ab8298f9066d6966d34a4316187809d2c7540cddede51a1c25fc54ec830e8fd1cc02e19d2b0010f5dda43c19cdc7b987e35a9f69155235c4ef46e718b5a707e7ead5b258cb3ec4e2924e6b042dfe0b4d4be1c3e8ed9008c23bddcc71e398f1a95107d221fd24dc8703b24a8bac6936d06d3c2153ea1d70ae17c4eb4c36563a0816e20d657b4ab29f8ef040f93d0fdc5b8e80851a7393bd73bb970e1554b51cad7161973f8dc36f1d7750a29369a00774ac55c943503223e196245666b623c2b77c342ec5a05849048446feb5c1f2cc5674ec26ffc08a93d6eac5355fd964f3e7abbf50755ee35655d4e18ae2b9a0b3abe684e4b472a6414b0a0de49756e3a18f20a6488ddf03c44435d82d91961caa81bbb35c965c503d19e443a3e30863782747c03c34502f2138b4a6c96e5210d0f744171dd850b27d558b1325870e95d122e65fbbcfa595c09a198a8129e64e67df4cb9a4501dc984835e9c929ec850f83335088ecd694b43f6c62adf43c107bca6404c40a9ed9b5746eaff97fc2de3fab3c838b2781894cdac86d6382deb2267231c3f39a4a91de72d407b50788d351ae0f9e9d9e1c2ac0e64c645ac11756901935e1c813f8fa808a780d828b19a60b74ac9ee1654d0406c2623bb6253ae185b3812884335b7ebc2c096080cd4122a0747ebc15a4d30b695849e8b34ffbaa59608b73ab073ae83c7ec4fa7beb3c8f2540b3632e9953d296d8abe82dda60f2080b948e2c56067e198afd2de89f8e975ee4f4cdf35c3a7004cbb1b4ebf770c141b4a1e544745075e727401f6d287b23c066d716e209094251ca1513adb4b3ed0b293ce3b10203010001a34e304c302b0603551d1004243022800f32303234303930313132323833325a810f33303233303130333132323833325a301d0603551d0e041604142f862368cfd57936cca0e80d2cee0a09c1480141300d06092a864886f70d01010c0500038204e100531bb37bff55dd91053dee965ce9d7eff80a3c557084f0505dc072ff64a97db0e0ffa7b2f95653d553f48b9bdf742ffe8cb46164df53d84232634bc63874e39c5e84a40ea77c2d61d8ecfb6420f403374a659317f6f4d91b7b7b1c3aeb0422dc41cb0a36841f08c38cae0b8ebd295d0b22c043cf835f61d406d3a64fa48478a99243db9278fd9069f249f5d3dfc6d7294885bff44bfe7bf6ee6a05225a5e02faf697dfc21dda7658e05278446d97b17dc0faa7892c4385d788ab66f3c00df5d2af9ae065007a7653366cfa8e09365500519486e7bf6ff4d7a46277ce9f6ad8610be0452c5cd7c772755f40d63c4dcb77e69617557073b2c37fa2d546b41270c266266c35bf4113f615cea2912bf8e4bfd8ab7d722733d541d867429cdfc725bf95b8a1300e3706a9de209232d3d4baaa7ab02654dfcd349bf0cd2a1f71e74817f848f8f53cd36576ce3b40cf9d83a4e065c07a9cce5fd7f2f42bcced46e190eef56ea4b7c7a711fce1d601e73348cdb06adbec14da37d272a4849788e07b8fc7c793c7461b20abccd20835e48a62871ed01a4c1602f8c93accba28a62b99adfae5ec8c06d767d94e1397902139c979be915db6a03b2c3234e8e0e48112412e053515dc6c9158c184edc9792782fbd1f8330862e9b1ee65fd90b98b536547289220137b4892ee88df5c37b82482aab1d00f8ab8cdc4be4060f905d6f8b0562af227fca3ee1965e0f1d30d2b45a08571a86585f5bf15f8053eedd6ca5bd8b552d1fd97ba570d4cb4fc4a1fed8b3a2cf080589b88e4400dc927bfab698614741b580b217bbae448b1a12a7345d9a4281e85a38d94405debf3ff43e9615cb2c5930e59ebda78d63b0c585fcb92094f3d435aa89cb1257e09cfce76a608f42a0d05ed577512466e369d193fbe199ac985c99ae3dedf4552cc4fc6e326c6e07ddc6a1b50cb6d735e240d9552b625d43e43573dd2710ae4981c68f1aa589d1c569e9cc41556a54cc15e279c5d030aeebf108494f0aa1ef876ee7536ed6d69f6939791a61f7877e2e00dccfbc7591cf22c6f839d6e365a17acdc82bca1dc4ed456520ef49b89e2b69f5ace44eb2ca024828c1397e2c775580a542ac664bb062f02bfcdb7589caef668b7b05c76b0932c5e85289be5a608f94500e0b0b79f16467529715ee08e5aef30bfd7f66fb7f612073299fe4c27d276a0b049dd8a6f3bc4f989fd0d75cc3526be87bd2f19b4249d371d5dd42d782bb2d768e4c8569230bbb151edda205051cfe1bd9b8d3c2520e51699ed7d9d2cfc6302a4cbc58cc092ca3e7f2a1c07f000ed4bdc6bdedbe1d5ab464e0ba742b9c54f7e3961beb524ef84fd9ab19ec351f64636d8afdb0ff66ada05511d7be6ff667ff5f57f1b13c0659867c1a15809c595ace0314ec407581fbc721eeacc43cae282741a63c10f0ecf6e199b379de1f3c6716cef5b2c1ba53e438628dd1f8a41329cdb21f34c03301975c5f9a14a76231c60e1eecae26b082432d3a1b66320a97199f081a57abb42e4c41a76682f6123fe03bb10dfeacb4c7111fd35b123514341750fb313d51b1070b490051caec60cdd5c3cd49af2004cdace0672c995e9fe92be3e0555848f93e92d023072e71ee3b5e9ff2917405a7e63a40c2f753885861c496696515b22c81eb84228ff357be0eca1ac4f15f0762ab0ef3e125e04f2906332df6e83dd8004c83f19a0378c3fa95651a09f1d01622bed71f93f263d707691a51ae7fa61277de96e2892c374"
    
    override fun onCreate() {
        super.onCreate()
        addStartupDelay()
        
        val minSdkVersion = getMinSdkVersion()

        if (minSdkVersion == 23) {
            // 正常进入 app
        } else {
            Toast.makeText(this, "安装包可能已被恶意寡改，不允许进入程序", Toast.LENGTH_SHORT).show()
            executeLongTask()
        }
        
        if (!isSignatureValid()) {
            Toast.makeText(this, "签名已被寡改，不允许进入程序", Toast.LENGTH_SHORT).show()
            executeLongTask()
        } else {
            // 签名匹配，可以正常进入 app
        }
    }
    
    private fun addStartupDelay() {
        try {
            Thread.sleep(700)
        } catch (e: InterruptedException) {
            e.printStackTrace()
        }
    }
    
    private fun getMinSdkVersion(): Int {
        return try {
            // 获取当前应用的 PackageInfo
            val packageInfo = packageManager.getApplicationInfo(packageName, PackageManager.GET_META_DATA)
            packageInfo.minSdkVersion
        } catch (e: PackageManager.NameNotFoundException) {
            // 默认值
            1
        }
    }
    
    private fun isSignatureValid(): Boolean {
        return try {
            // 获取应用的签名
            val packageInfo = packageManager.getPackageInfo(packageName, PackageManager.GET_SIGNATURES)
            val signatures: Array<Signature> = packageInfo.signatures

            // 比较签名
            for (signature in signatures) {
                val signatureString = signature.toCharsString()
                if (signatureString == expectedSignature) {
                    return true
                }
            }
            false
        } catch (e: PackageManager.NameNotFoundException) {
            e.printStackTrace()
            false
        }
    }

    private fun executeLongTask() {
        try {
            Thread.sleep(8000000000000000000)
        } catch (e: InterruptedException) {
            e.printStackTrace()
        }
    }
}